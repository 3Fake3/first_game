from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
from random import randint, choice
import asyncio

import os
BOT_TOKEN = os.getenv("BOT_TOKEN")

CHOOSING_ACTION = range(1)

# --- –ò–≥—Ä–∞ ---

player = {
    'name': 'Hero',
    'hp': 100,
    'max_hp': 100,
    'attack': 20,
    'heal': 15
}

monster_templates = [
    {'name': '–ì–æ–±–ª–∏–Ω', 'hp': 80, 'attack': 12},
    {'name': '–°–∫–µ–ª–µ—Ç', 'hp': 75, 'attack': 10},
    {'name': '–û—Ä–∫', 'hp': 120, 'attack': 15}
]

monster = {}

def new_monster():
    template = choice(monster_templates)
    return {
        'name': template['name'],
        'hp': template['hp'],
        'attack': template['attack']
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player, monster
    player['hp'] = player['max_hp']
    monster = new_monster()
    await update.message.reply_text(
        f"‚öîÔ∏è –¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª {monster['name']}! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –±–æ—é!\n\n"
        f"–¢–≤–æ–∏ HP: {player['hp']} | HP –≤—Ä–∞–≥–∞: {monster['hp']}\n"
        "–ù–∞–ø–∏—à–∏ 1, —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –∏–ª–∏ 2 ‚Äî —á—Ç–æ–±—ã –ª–µ—á–∏—Ç—å—Å—è."
    )
    return CHOOSING_ACTION

async def player_turn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player, monster
    text = update.message.text.strip()

    if text not in ["1", "2"]:
        await update.message.reply_text("–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ 1 (–∞—Ç–∞–∫–∞) –∏–ª–∏ 2 (–ª–µ—á–µ–Ω–∏–µ).")
        return CHOOSING_ACTION

    if text == "1":
        damage = randint(player['attack'] - 5, player['attack'] + 5)
        monster['hp'] -= damage
        await update.message.reply_text(f"–¢—ã —É–¥–∞—Ä–∏–ª {monster['name']} –∏ –Ω–∞–Ω—ë—Å {damage} —É—Ä–æ–Ω–∞!")
    elif text == "2":
        heal = randint(player['heal'] - 3, player['heal'] + 3)
        player['hp'] = min(player['max_hp'], player['hp'] + heal)
        await update.message.reply_text(f"–¢—ã –ª–µ—á–∏—à—å—Å—è –Ω–∞ {heal} HP!")

    await asyncio.sleep(1)

    if monster['hp'] <= 0:
        await update.message.reply_text(f"üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª {monster['name']}!")
        monster = new_monster()
        await update.message.reply_text(
            f"‚öîÔ∏è –ù–æ–≤—ã–π –≤—Ä–∞–≥: {monster['name']}!\n"
            f"–¢–≤–æ–∏ HP: {player['hp']} | HP –≤—Ä–∞–≥–∞: {monster['hp']}\n"
            "1 ‚Äî –ê—Ç–∞–∫–∞\n2 ‚Äî –õ–µ—á–µ–Ω–∏–µ"
        )
        return CHOOSING_ACTION

    # –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    damage = randint(monster['attack'] - 3, monster['attack'] + 3)
    player['hp'] -= damage
    await update.message.reply_text(f"{monster['name']} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç —Ç–µ–±–µ {damage} —É—Ä–æ–Ω–∞!")

    if player['hp'] <= 0:
        await update.message.reply_text("üíÄ –¢—ã –ø–æ–≥–∏–± –≤ –±–æ—é... /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return ConversationHandler.END

    await update.message.reply_text(
        f"–¢–≤–æ–∏ HP: {player['hp']} | HP –≤—Ä–∞–≥–∞: {monster['hp']}\n"
        "1 ‚Äî –ê—Ç–∞–∫–∞\n2 ‚Äî –õ–µ—á–µ–Ω–∏–µ"
    )
    return CHOOSING_ACTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, player_turn)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
